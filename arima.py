# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SIKqF5gi8pji2PSWqGh0tL4aaTHoJ-v4
"""

import pandas as pd
import statsmodels.graphics.tsaplots as tsa_plots
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt
from matplotlib import pyplot
import numpy as np

final=pd.read_excel('/content/cona_sample.xlsx')
#final=final[final['im_item_code1']==2411]

final.head()

#final=pd.read_csv('/content/FinalDataset.csv')
final=final[['inv_itemwise_value_reporting_amount','inv_invoice_date']]
final=final.groupby(['inv_invoice_date']).sum(['inv_itemwise_value_reporting_amount'])
final

def Replace_Outliers(l1):
    l1 = pd.DataFrame({'col': l1})
    Q1 = np.percentile(l1, 25, interpolation='midpoint')
    Q3 = np.percentile(l1, 75, interpolation='midpoint')

    IQR = Q3 - Q1
    df2 = pd.DataFrame(l1)
    outliers = l1[((l1 < (Q1 - 1.5 * IQR)) | (l1 > (Q3 + 1.5 * IQR)))]
    outliers.dropna(inplace=True, axis=0)
    # df=outliers

    outliers = list(outliers.values)
    rep = np.median(l1)
    df2[df2.columns[0]] = df2[df2.columns[0]].replace(outliers, rep)

    #   return list(outliers.flatten())
    return list(df2.values.flatten())

Walmart =pd.read_csv('/content/Walmart Footfalls Raw.csv')
Walmart

final.inv_itemwise_value_reporting_amount=Replace_Outliers(list(final['inv_itemwise_value_reporting_amount'].values))
final.tail(15)

# Data Partition
Train = final.head(512)
Test = final.tail(100)

tsa_plots.plot_acf(final.inv_itemwise_value_reporting_amount, lags = 100)
tsa_plots.plot_pacf(final.inv_itemwise_value_reporting_amount,lags = 100)

# ARIMA with AR=1, MA = 12
model1 = ARIMA(Train.inv_itemwise_value_reporting_amount, order = (1, 1, 100))
res1 = model1.fit()
print(res1.summary())

# Forecast for next 12 months
start_index = len(Train)
end_index = start_index+99
forecast_test = res1.predict(start = start_index, end = end_index)

print(forecast_test)

# Evaluate forecasts
rmse_test = sqrt(mean_squared_error(Test.inv_itemwise_value_reporting_amount, forecast_test))
print('Test RMSE: %.3f' % rmse_test)

# plot forecasts against actual outcomes
pyplot.plot(Test.inv_itemwise_value_reporting_amount)
pyplot.plot(forecast_test, color='red')
pyplot.show()

